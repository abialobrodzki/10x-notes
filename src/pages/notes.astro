---
import Layout from "../layouts/Layout.astro";
import { NotesListPage } from "../components/notes/NotesListPage";
import { NotesService } from "../lib/services/notes.service";
import { TagsService } from "../lib/services/tags.service";
import { notesListQuerySchema } from "../lib/validators/notes.schemas";
import { tagsListQuerySchema } from "../lib/validators/tags.schemas";
import type { NotesListDTO, TagsListDTO } from "../types";

// Disable prerendering - this is a dynamic page
export const prerender = false;

// Step 1: Get authenticated user from middleware
// Middleware ensures user is authenticated, redirect to login if not
const user = Astro.locals.user;
if (!user) {
  return Astro.redirect("/login");
}
const userId = user.id;

// Step 2: Parse and validate query parameters
const searchParams = Object.fromEntries(Astro.url.searchParams);

// Validate notes query params
const notesQueryResult = notesListQuerySchema.safeParse(searchParams);
const notesQuery = notesQueryResult.success
  ? notesQueryResult.data
  : {
      include_shared: true,
      sort_by: "meeting_date" as const,
      order: "desc" as const,
      page: 1,
      limit: 20,
    };

// Validate tags query params (include_shared from URL)
const tagsQueryResult = tagsListQuerySchema.safeParse({
  include_shared: searchParams.include_shared,
});
const tagsQuery = tagsQueryResult.success ? tagsQueryResult.data : { include_shared: true };

// Step 3: Fetch data from services (SSR)
const notesService = new NotesService(Astro.locals.supabase);
const tagsService = new TagsService(Astro.locals.supabase);

let notesData: NotesListDTO;
let tagsData: TagsListDTO;
let error: string | null = null;

try {
  [notesData, tagsData] = await Promise.all([
    notesService.getNotes(userId, notesQuery),
    tagsService.getTags(userId, tagsQuery),
  ]);
} catch (err) {
  // Check for specific database errors and provide helpful messages
  const errorMessage = err instanceof Error ? err.message : "Unknown error occurred";

  if (errorMessage.includes("infinite recursion")) {
    // eslint-disable-next-line no-console
    console.error("❌ Database Configuration Error: Infinite recursion in RLS policies");
    // eslint-disable-next-line no-console
    console.error("   Please run: supabase db reset (or apply pending migrations)");
    error = "Database configuration error. Please contact the administrator.";
  } else {
    // eslint-disable-next-line no-console
    console.error("❌ Error fetching notes data:", errorMessage);
    error = errorMessage;
  }

  // Provide empty data on error
  notesData = {
    notes: [],
    pagination: {
      page: 1,
      limit: 20,
      total: 0,
      total_pages: 0,
    },
  };
  tagsData = { tags: [] };
}
---

<Layout title="10xNotes - Moje notatki">
  <NotesListPage
    client:load
    initialNotes={notesData}
    initialTags={tagsData}
    initialQuery={notesQuery}
    initialError={error}
  />
</Layout>
